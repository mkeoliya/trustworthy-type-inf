[{"file": "main.py", "line_number": 3, "col_offset": 5, "function": "C.func", "type": ["str"], "code": "# Initialize classes with self parameters in a nested manner.\n\nclass C:\n\n    def func(self):\n"}, {"file": "main.py", "line_number": 8, "col_offset": 24, "function": "B.__init__", "parameter": "c", "type": ["C"], "code": "# Initialize classes with self parameters in a nested manner.\n\nclass C:\n\n    def func(self):\n\n        return \"Hello from class C\"\n\n\n\n\n\nclass B:\n\n    def __init__(self, c):\n"}, {"file": "main.py", "line_number": 9, "col_offset": 9, "function": "B.__init__", "variable": "B.c", "type": ["C"], "code": "# Initialize classes with self parameters in a nested manner.\n\nclass C:\n\n    def func(self):\n\n        return \"Hello from class C\"\n\n\n\n\n\nclass B:\n\n    def __init__(self, c):\n\n        self.c = c\n"}, {"file": "main.py", "line_number": 11, "col_offset": 9, "function": "B.func", "type": ["str"], "code": "# Initialize classes with self parameters in a nested manner.\n\nclass C:\n\n    def func(self):\n\n        return \"Hello from class C\"\n\n\n\n\n\nclass B:\n\n    def __init__(self, c):\n\n        self.c = c\n\n\n\n    def func(self):\n"}, {"file": "main.py", "line_number": 17, "col_offset": 9, "function": "A.__init__", "variable": "A.c", "type": ["C"], "code": "# Initialize classes with self parameters in a nested manner.\n\nclass C:\n\n    def func(self):\n\n        return \"Hello from class C\"\n\n\n\n\n\nclass B:\n\n    def __init__(self, c):\n\n        self.c = c\n\n\n\n    def func(self):\n\n        return self.c.func()\n\n\n\n\n\nclass A:\n\n    def __init__(self):\n\n        self.c = C()\n"}, {"file": "main.py", "line_number": 19, "col_offset": 9, "function": "A.func", "type": ["str"], "code": "# Initialize classes with self parameters in a nested manner.\n\nclass C:\n\n    def func(self):\n\n        return \"Hello from class C\"\n\n\n\n\n\nclass B:\n\n    def __init__(self, c):\n\n        self.c = c\n\n\n\n    def func(self):\n\n        return self.c.func()\n\n\n\n\n\nclass A:\n\n    def __init__(self):\n\n        self.c = C()\n\n\n\n    def func(self):\n"}, {"file": "main.py", "line_number": 20, "col_offset": 9, "function": "A.func", "variable": "b", "type": ["B"], "code": "# Initialize classes with self parameters in a nested manner.\n\nclass C:\n\n    def func(self):\n\n        return \"Hello from class C\"\n\n\n\n\n\nclass B:\n\n    def __init__(self, c):\n\n        self.c = c\n\n\n\n    def func(self):\n\n        return self.c.func()\n\n\n\n\n\nclass A:\n\n    def __init__(self):\n\n        self.c = C()\n\n\n\n    def func(self):\n\n        b = B(self.c)\n"}, {"file": "main.py", "line_number": 24, "col_offset": 1, "variable": "a", "type": ["A"], "code": "# Initialize classes with self parameters in a nested manner.\n\nclass C:\n\n    def func(self):\n\n        return \"Hello from class C\"\n\n\n\n\n\nclass B:\n\n    def __init__(self, c):\n\n        self.c = c\n\n\n\n    def func(self):\n\n        return self.c.func()\n\n\n\n\n\nclass A:\n\n    def __init__(self):\n\n        self.c = C()\n\n\n\n    def func(self):\n\n        b = B(self.c)\n\n        return b.func()\n\n\n\n\n\na = A()\n"}, {"file": "main.py", "line_number": 25, "col_offset": 1, "variable": "b", "type": ["str"], "code": "# Initialize classes with self parameters in a nested manner.\n\nclass C:\n\n    def func(self):\n\n        return \"Hello from class C\"\n\n\n\n\n\nclass B:\n\n    def __init__(self, c):\n\n        self.c = c\n\n\n\n    def func(self):\n\n        return self.c.func()\n\n\n\n\n\nclass A:\n\n    def __init__(self):\n\n        self.c = C()\n\n\n\n    def func(self):\n\n        b = B(self.c)\n\n        return b.func()\n\n\n\n\n\na = A()\n\nb = a.func()\n"}]