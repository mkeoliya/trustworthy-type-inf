[{"file": "main.py", "line_number": 6, "col_offset": 9, "function": "Shape.area", "type": ["Nonetype"], "code": "from abc import ABC, abstractmethod\n\n\n\n\n\nclass Shape(ABC):\n\n    @abstractmethod\n\n    def area(self):\n"}, {"file": "main.py", "line_number": 11, "col_offset": 24, "parameter": "width", "function": "Rectangle.__init__", "type": ["int"], "code": "from abc import ABC, abstractmethod\n\n\n\n\n\nclass Shape(ABC):\n\n    @abstractmethod\n\n    def area(self):\n\n        pass\n\n\n\n\n\nclass Rectangle(Shape):\n\n    def __init__(self, width, height):\n"}, {"file": "main.py", "line_number": 11, "col_offset": 31, "parameter": "height", "function": "Rectangle.__init__", "type": ["int"], "code": "from abc import ABC, abstractmethod\n\n\n\n\n\nclass Shape(ABC):\n\n    @abstractmethod\n\n    def area(self):\n\n        pass\n\n\n\n\n\nclass Rectangle(Shape):\n\n    def __init__(self, width, height):\n"}, {"file": "main.py", "line_number": 12, "col_offset": 9, "variable": "Rectangle.width", "function": "Rectangle.__init__", "type": ["int"], "code": "from abc import ABC, abstractmethod\n\n\n\n\n\nclass Shape(ABC):\n\n    @abstractmethod\n\n    def area(self):\n\n        pass\n\n\n\n\n\nclass Rectangle(Shape):\n\n    def __init__(self, width, height):\n\n        self.width = width\n"}, {"file": "main.py", "line_number": 13, "col_offset": 9, "variable": "Rectangle.height", "function": "Rectangle.__init__", "type": ["int"], "code": "from abc import ABC, abstractmethod\n\n\n\n\n\nclass Shape(ABC):\n\n    @abstractmethod\n\n    def area(self):\n\n        pass\n\n\n\n\n\nclass Rectangle(Shape):\n\n    def __init__(self, width, height):\n\n        self.width = width\n\n        self.height = height\n"}, {"file": "main.py", "line_number": 15, "col_offset": 5, "function": "Rectangle.area", "type": ["int"], "code": "from abc import ABC, abstractmethod\n\n\n\n\n\nclass Shape(ABC):\n\n    @abstractmethod\n\n    def area(self):\n\n        pass\n\n\n\n\n\nclass Rectangle(Shape):\n\n    def __init__(self, width, height):\n\n        self.width = width\n\n        self.height = height\n\n\n\n    def area(self):\n"}, {"file": "main.py", "line_number": 19, "col_offset": 1, "variable": "a", "type": ["Rectangle"], "code": "from abc import ABC, abstractmethod\n\n\n\n\n\nclass Shape(ABC):\n\n    @abstractmethod\n\n    def area(self):\n\n        pass\n\n\n\n\n\nclass Rectangle(Shape):\n\n    def __init__(self, width, height):\n\n        self.width = width\n\n        self.height = height\n\n\n\n    def area(self):\n\n        return self.width * self.height\n\n\n\n\n\na = Rectangle(5, 10)\n"}, {"file": "main.py", "line_number": 20, "col_offset": 1, "variable": "b", "type": ["int"], "code": "from abc import ABC, abstractmethod\n\n\n\n\n\nclass Shape(ABC):\n\n    @abstractmethod\n\n    def area(self):\n\n        pass\n\n\n\n\n\nclass Rectangle(Shape):\n\n    def __init__(self, width, height):\n\n        self.width = width\n\n        self.height = height\n\n\n\n    def area(self):\n\n        return self.width * self.height\n\n\n\n\n\na = Rectangle(5, 10)\n\nb = a.area()\n"}]