[{"file": "main.py", "line_number": 11, "col_offset": 9, "function": "A.func", "type": ["str"], "code": "# This tests the simple rule of MRO: Most specific first.\n\n\n\n# MRO appends the superclasses of the parents in the inheritance chain. So the inheritance chain should look like this: D -> B -> A -> object -> C -> A -> object\n\n# However, since A and object appear later in the chain, that means that more specific versions exist, so the correct inheritance chain is: D -> B -> C -> A -> object\n\n\n\n\n\nclass A:\n\n    def __init__(self):\n\n        pass\n\n\n\n    def func(self):\n"}, {"file": "main.py", "line_number": 20, "col_offset": 9, "function": "C.func", "type": ["int"], "code": "# This tests the simple rule of MRO: Most specific first.\n\n\n\n# MRO appends the superclasses of the parents in the inheritance chain. So the inheritance chain should look like this: D -> B -> A -> object -> C -> A -> object\n\n# However, since A and object appear later in the chain, that means that more specific versions exist, so the correct inheritance chain is: D -> B -> C -> A -> object\n\n\n\n\n\nclass A:\n\n    def __init__(self):\n\n        pass\n\n\n\n    def func(self):\n\n        return \"Hello from func in classA\"\n\n\n\n\n\nclass B(A):\n\n    pass\n\n\n\n\n\nclass C(A):\n\n    def func(self):\n"}, {"file": "main.py", "line_number": 28, "col_offset": 1, "variable": "d", "type": ["D"], "code": "# This tests the simple rule of MRO: Most specific first.\n\n\n\n# MRO appends the superclasses of the parents in the inheritance chain. So the inheritance chain should look like this: D -> B -> A -> object -> C -> A -> object\n\n# However, since A and object appear later in the chain, that means that more specific versions exist, so the correct inheritance chain is: D -> B -> C -> A -> object\n\n\n\n\n\nclass A:\n\n    def __init__(self):\n\n        pass\n\n\n\n    def func(self):\n\n        return \"Hello from func in classA\"\n\n\n\n\n\nclass B(A):\n\n    pass\n\n\n\n\n\nclass C(A):\n\n    def func(self):\n\n        return 42\n\n\n\n\n\nclass D(B, C):\n\n    pass\n\n\n\n\n\nd = D()\n"}, {"file": "main.py", "line_number": 29, "col_offset": 1, "variable": "e", "type": ["int"], "code": "# This tests the simple rule of MRO: Most specific first.\n\n\n\n# MRO appends the superclasses of the parents in the inheritance chain. So the inheritance chain should look like this: D -> B -> A -> object -> C -> A -> object\n\n# However, since A and object appear later in the chain, that means that more specific versions exist, so the correct inheritance chain is: D -> B -> C -> A -> object\n\n\n\n\n\nclass A:\n\n    def __init__(self):\n\n        pass\n\n\n\n    def func(self):\n\n        return \"Hello from func in classA\"\n\n\n\n\n\nclass B(A):\n\n    pass\n\n\n\n\n\nclass C(A):\n\n    def func(self):\n\n        return 42\n\n\n\n\n\nclass D(B, C):\n\n    pass\n\n\n\n\n\nd = D()\n\ne = d.func()\n"}]